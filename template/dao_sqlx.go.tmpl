package {{.daoPackageName}}

import (
    "context"
    "fmt"
    "time"

	"{{.modelFQPN}}"

    "github.com/guregu/null"

)

var (
    _ = time.Second
    _ = null.Bool{}
)


/*
{{ $ddl := .TableInfo.DBMeta.DDL }}
{{if $ddl }}
DB Table Details
-------------------------------------
{{$ddl}}
{{- end}}


PrimaryKeyNamesList: {{.PrimaryKeyNamesList}}
PrimaryKeyNames    : {{.PrimaryKeyNames}}
delSql             : {{.delSql}}
updateSql          : {{.updateSql}}
insertSql          : {{.insertSql}}
selectOneSql       : {{.selectOneSql}}
selectMultiSql     : {{.selectMultiSql}}

*/



// GetAll{{pluralize .StructName}} is a function to get a slice of record(s) from {{.TableName}} table in the {{.DatabaseName}} database
// params - page     - page requested (defaults to 0)
// params - pagesize - number of records in a page  (defaults to 20)
// params - order    - db sort order column
// error - ErrNotFound, db Find error
func GetAll{{pluralize .StructName}}(ctx context.Context, page, pagesize int64, order string) ({{pluralize .StructName | toLower}} []*{{.modelPackageName}}.{{.StructName}}, totalRows int, err error) {
	sql := "{{.selectMultiSql}}"

	if order != "" {
	    sql = sql +" order by " +order
	}
    sql = fmt.Sprintf("%s LIMIT %d, %d", sql, page, pagesize)
	err = DB.SelectContext(ctx, &{{pluralize .StructName | toLower}}, sql, page, pagesize)
	return {{pluralize .StructName | toLower}}, len({{pluralize .StructName | toLower}}), err
}

// Get{{.StructName}} is a function to get a single record to {{.TableName}} table in the {{.DatabaseName}} database
// error - ErrNotFound, db Find error
func Get{{.StructName}}(ctx context.Context,{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}} {{$field.GoFieldType}},{{end}}{{end -}}) (record *{{.modelPackageName}}.{{.StructName}}, err error) {
	sql := "{{.selectOneSql}}"
	record = &{{.modelPackageName}}.{{.StructName}}{}
	err = DB.GetContext(ctx, record, sql, {{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}},{{end}}{{end -}})
    if err != nil {
        return nil, err
    }
    return record, nil
}

// Add{{.StructName}} is a function to add a single record to {{.TableName}} table in the {{.DatabaseName}} database
// error - ErrInsertFailed, db save call failed
func Add{{.StructName}}(ctx context.Context, record *{{.modelPackageName}}.{{.StructName}}) (result *{{.modelPackageName}}.{{.StructName}}, RowsAffected int64, err error) {
	sql := "{{.insertSql}}"
	dbResult := DB.MustExecContext(ctx, sql, {{range $field := .TableInfo.CodeFields}} {{ if not $field.PrimaryKeyArgName }} record.{{$field.GoFieldName}},{{end}}{{end -}} )
	id, err := dbResult.LastInsertId()
	rows, err := dbResult.RowsAffected()
	{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} record.{{$field.GoFieldName}} = {{$field.GoFieldType}}(id){{end}}{{end}}
	return record, rows, err
}

// Update{{.StructName}} is a function to update a single record from {{.TableName}} table in the {{.DatabaseName}} database
// error - ErrNotFound, db record for id not found
// error - ErrUpdateFailed, db meta data copy failed or db.Save call failed
func Update{{.StructName}}(ctx context.Context, {{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}} {{$field.GoFieldType}},{{end}}{{end -}}updated *{{.modelPackageName}}.{{.StructName}}) (result *{{.modelPackageName}}.{{.StructName}}, RowsAffected int64, err error) {
	sql := "{{.updateSql}}"
	dbResult := DB.MustExecContext(ctx, sql, {{range $field := .TableInfo.CodeFields}} {{ if not $field.PrimaryKeyArgName }} updated.{{$field.GoFieldName}},{{end}}{{end -}} {{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}},{{end}}{{end -}})
	rows, err := dbResult.RowsAffected()
    {{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} updated.{{$field.GoFieldName}} = {{$field.PrimaryKeyArgName}} {{end}}{{end}}
	return updated, rows, err
}

// Delete{{.StructName}} is a function to delete a single record from {{.TableName}} table in the {{.DatabaseName}} database
// error - ErrNotFound, db Find error
// error - ErrDeleteFailed, db Delete failed error
func Delete{{.StructName}}(ctx context.Context,{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}} {{$field.GoFieldType}},{{end}}{{end -}}) (rowsAffected int64, err error) {
	sql := "{{.delSql}}"
	result := DB.MustExecContext(ctx, sql, {{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}},{{end}}{{end -}} )
	return result.RowsAffected()
}

