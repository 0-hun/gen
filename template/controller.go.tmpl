package {{.apiPackageName}}

import (
	"net/http"

	"{{.modelFQPN}}"
    "{{.daoFQPN}}"

	"github.com/gin-gonic/gin"
	"github.com/guregu/null"
	"github.com/julienschmidt/httprouter"
)

var (
    _ = null.Bool{}
)

func config{{pluralize .StructName}}Router(router *httprouter.Router) {
	router.GET("/{{pluralize .StructName | toLower}}", GetAll{{pluralize .StructName}})
	router.POST("/{{pluralize .StructName | toLower}}", Add{{.StructName}})

	router.GET("/{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/:{{$field.PrimaryKeyArgName}}{{end}}{{end -}}", Get{{.StructName}})
	router.PUT("/{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/:{{$field.PrimaryKeyArgName}}{{end}}{{end -}}", Update{{.StructName}})
	router.DELETE("/{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/:{{$field.PrimaryKeyArgName}}{{end}}{{end -}}", Delete{{.StructName}})
}

func configGin{{pluralize .StructName}}Router(router gin.IRoutes) {
	router.GET("/{{pluralize .StructName | toLower}}", ConverHttprouterToGin(GetAll{{pluralize .StructName}}))
	router.POST("/{{pluralize .StructName | toLower}}", ConverHttprouterToGin(Add{{.StructName}}))
	router.GET("/{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/:{{$field.PrimaryKeyArgName}}{{end}}{{end -}}", ConverHttprouterToGin(Get{{.StructName}}))
	router.PUT("/{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/:{{$field.PrimaryKeyArgName}}{{end}}{{end -}}", ConverHttprouterToGin(Update{{.StructName}}))
	router.DELETE("/{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/:{{$field.PrimaryKeyArgName}}{{end}}{{end -}}", ConverHttprouterToGin(Delete{{.StructName}}))
}

// GetAll{{pluralize .StructName}} is a function to get a slice of record(s) from {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Get list of {{.StructName}}
// @Tags {{.StructName}}
// @Description GetAll{{.StructName}} is a handler to get a slice of record(s) from {{.TableName}} table in the {{.DatabaseName}} database
// @Accept  json
// @Produce  json
// @Param   page     query    int     false        "page requested (defaults to 0)"
// @Param   pagesize query    int     false        "number of records in a page  (defaults to 20)"
// @Param   order    query    string  false        "db sort order column"
// @Success 200 {object} {{.apiPackageName}}.PagedResults{data=[]{{.modelPackageName}}.{{.StructName}}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 404 {object} {{.apiPackageName}}.HTTPError
// @Router /{{pluralize .StructName | toLower}} [get]
// http http://{{$.serverHost}}:{{$.serverPort}}/{{pluralize .StructName | toLower}}?page=0&pagesize=20
func GetAll{{pluralize .StructName}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
    page, err := readInt(r, "page", 0)
	if err != nil || page < 0 {
		returnError(w, r, {{.daoPackageName}}.ErrBadParams)
		return
	}

	pagesize, err := readInt(r, "pagesize", 20)
	if err != nil || pagesize <= 0 {
		returnError(w, r, {{.daoPackageName}}.ErrBadParams)
		return
	}

	order := r.FormValue("order")

    records, totalRows, err :=  {{.daoPackageName}}.GetAll{{pluralize .StructName}}(r.Context(), page, pagesize, order)
	if err != nil {
	    returnError(w, r, err)
		return
	}

	result := &PagedResults{Page: page, PageSize: pagesize, Data: records, TotalRecords: totalRows}
	writeJSON(w, result)
}


// Get{{.StructName}} is a function to get a single record to {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Get record from table {{.StructName}} by {{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}} {{ $field.PrimaryKeyArgName }} {{end}}{{end}}
// @Tags {{.StructName}}
{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}// @ID {{ $field.PrimaryKeyArgName }}{{end}}
{{end}}
// @Description Get{{.StructName}} is a function to get a single record to {{.TableName}} table in the {{.DatabaseName}} database
// @Accept  json
// @Produce  json
{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}// @Param  {{ $field.PrimaryKeyArgName }} path {{ $field.GoFieldType }} true "{{ $field.ColumnMeta.Name }}"{{end}}{{end}}
// @Success 200 {object} {{.modelPackageName}}.{{.StructName}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 404 {object} {{.apiPackageName}}.HTTPError "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error"
// @Router /{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{ {{- $field.PrimaryKeyArgName -}} }{{end}}{{end}} [get]
// http http://{{$.serverHost}}:{{$.serverPort}}/{{pluralize .StructName | toLower}}/1
func Get{{.StructName}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {

{{range $field := .TableInfo.CodeFields}}
{{ if $field.PrimaryKeyArgName }}

	{{$field.PrimaryKeyArgName}}, err := {{$field.PrimaryKeyFieldParser}}(ps, "{{$field.PrimaryKeyArgName}}")
	if err != nil {
		returnError(w, r, err)
		return
	}
{{end}}{{end}}

	record, err := {{.daoPackageName}}.Get{{.StructName}}(r.Context(),{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}},{{end}}{{end -}})
	if err != nil {
		returnError(w, r, err)
		return
	}

	writeJSON(w, record)
}



// Add{{.StructName}} add to add a single record to {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Add an record to {{.TableName}} table
// @Description add to add a single record to {{.TableName}} table in the {{.DatabaseName}} database
// @Tags {{.StructName}}
// @Accept  json
// @Produce  json
// @Param {{.StructName}} body {{.modelPackageName}}.{{.StructName}} true "Add {{.StructName}}"
// @Success 200 {object} {{.modelPackageName}}.{{.StructName}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 404 {object} {{.apiPackageName}}.HTTPError
// @Router /{{pluralize .StructName | toLower}} [post]
// echo '{{ToJSON .TableInfo.Instance 0}}' | http POST http://{{$.serverHost}}:{{$.serverPort}}/{{pluralize .StructName | toLower}}
func Add{{.StructName}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	{{.StructName | toLower}} := &{{.modelPackageName}}.{{.StructName}}{}

	if err := readJSON(r, {{.StructName | toLower}}); err != nil {
		returnError(w, r, {{.daoPackageName}}.ErrBadParams)
		return
	}


   if err := {{.StructName | toLower}}.BeforeSave(); err != nil {
      returnError(w, r, {{.daoPackageName}}.ErrBadParams)
   }

   {{.StructName | toLower}}.Prepare()

   if err := {{.StructName | toLower}}.Validate({{.modelPackageName}}.Create); err != nil {
      returnError(w, r, {{.daoPackageName}}.ErrBadParams)
      return
   }

    var err error
	{{.StructName | toLower}}, _, err = {{.daoPackageName}}.Add{{.StructName}}(r.Context(), {{.StructName | toLower}})
	if err != nil {
		returnError(w, r, err)
		return
	}

	writeJSON(w, {{.StructName | toLower}})
}


// Update{{.StructName}} Update a single record from {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Update an record in table {{.TableName}}
// @Description Update a single record from {{.TableName}} table in the {{.DatabaseName}} database
// @Tags {{.StructName}}
// @Accept  json
// @Produce  json
{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}// @Param  {{ $field.PrimaryKeyArgName }} path {{ $field.GoFieldType }} true "{{ $field.ColumnMeta.Name }}"{{end}}{{end}}
// @Param  {{.StructName}} body {{.modelPackageName}}.{{.StructName}} true "Update {{.StructName}} record"
// @Success 200 {object} {{.modelPackageName}}.{{.StructName}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 404 {object} {{.apiPackageName}}.HTTPError
// @Router /{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{ {{- $field.PrimaryKeyArgName -}} }{{end}}{{end}} [patch]
// echo '{{ToJSON .TableInfo.Instance 0}}' | http PATCH http://{{$.serverHost}}:{{$.serverPort}}/{{pluralize .StructName | toLower}}/1
func Update{{.StructName}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
{{range $field := .TableInfo.CodeFields}}
{{ if $field.PrimaryKeyArgName }}

	{{$field.PrimaryKeyArgName}}, err := {{$field.PrimaryKeyFieldParser}}(ps, "{{$field.PrimaryKeyArgName}}")
	if err != nil {
		returnError(w, r, err)
		return
	}
{{end}}{{end}}

	{{.StructName | toLower}} := &{{.modelPackageName}}.{{.StructName}}{}
	if err := readJSON(r, {{.StructName | toLower}}); err != nil {
		returnError(w, r, {{.daoPackageName}}.ErrBadParams)
		return
	}

   if err := {{.StructName | toLower}}.BeforeSave(); err != nil {
      returnError(w, r, {{.daoPackageName}}.ErrBadParams)
   }

   {{.StructName | toLower}}.Prepare()

   if err := {{.StructName | toLower}}.Validate( {{.modelPackageName}}.Update); err != nil {
      returnError(w, r, {{.daoPackageName}}.ErrBadParams)
      return
   }

	{{.StructName | toLower}}, _, err = {{.daoPackageName}}.Update{{.StructName}}(r.Context(),
	{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}},{{end}}{{end}}
	{{.StructName | toLower}})
	if err != nil {
	    returnError(w, r, err)
   	    return
	}

	writeJSON(w, {{.StructName | toLower}})
}



// Delete{{.StructName}} Delete a single record from {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Delete a record from {{.TableName}}
// @Description Delete a single record from {{.TableName}} table in the {{.DatabaseName}} database
// @Tags {{.StructName}}
// @Accept  json
// @Produce  json
{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}// @Param  {{ $field.PrimaryKeyArgName }} path {{ $field.GoFieldType }} true "{{ $field.ColumnMeta.Name }}"{{end}}{{end}}
// @Success 204 {object} {{.modelPackageName}}.{{.StructName}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 500 {object} {{.apiPackageName}}.HTTPError
// @Router /{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{ {{- $field.PrimaryKeyArgName -}} }{{end}}{{end}} [delete]
// http DELETE http://{{$.serverHost}}:{{$.serverPort}}/{{pluralize .StructName | toLower}}/1
func Delete{{.StructName}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
{{range $field := .TableInfo.CodeFields}}
{{ if $field.PrimaryKeyArgName }}
	{{$field.PrimaryKeyArgName}}, err := {{$field.PrimaryKeyFieldParser}}(ps, "{{$field.PrimaryKeyArgName}}")
	if err != nil {
		returnError(w, r, err)
		return
	}
{{end}}{{end}}

	rowsAffected, err := {{.daoPackageName}}.Delete{{.StructName}}(r.Context(),{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}},{{end}}{{end -}})
	if err != nil {
	    returnError(w, r, err)
	    return
	}

	writeRowsAffected(w, rowsAffected )
}


