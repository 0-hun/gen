package {{.daoPackageName}}

import (
    "context"

	"{{.modelFQPN}}"

	"github.com/smallnest/gen/dbmeta"
)


// GetAll{{.StructName}} is a function to get a slice of record(s) from {{.TableName}} table in the {{.DatabaseName}} database
// params - page     - page requested (defaults to 0)
// params - pagesize - number of records in a page  (defaults to 20)
// params - order    - db sort order column
// error - NotFound, db Find error
func GetAll{{pluralize .StructName}}(ctx context.Context, page, pagesize int64, order string) ({{pluralize .StructName | toLower}} []*{{.modelPackageName}}.{{.StructName}}, totalRows int, err error) {

	{{pluralize .StructName | toLower}} = []*{{.modelPackageName}}.{{.StructName}}{}

	{{pluralize .StructName | toLower}}_orm := DB.Model(&{{.modelPackageName}}.{{.StructName}}{})
    {{pluralize .StructName | toLower}}_orm.Count(&totalRows)

	if page > 0 {
		offset := (page - 1) * pagesize
		{{pluralize .StructName | toLower}}_orm = {{pluralize .StructName | toLower}}_orm.Offset(offset).Limit(pagesize)
	} else {
		{{pluralize .StructName | toLower}}_orm = {{pluralize .StructName | toLower}}_orm.Limit(pagesize)
    }

	if order != "" {
		{{pluralize .StructName | toLower}}_orm = {{pluralize .StructName | toLower}}_orm.Order(order)
	}

	if err = {{pluralize .StructName | toLower}}_orm.Find(&{{pluralize .StructName | toLower}}).Error; err != nil {
	    err = NotFound
		return nil, -1, err
	}

	return {{pluralize .StructName | toLower}}, totalRows, nil
}

// Get{{.StructName}} is a function to get a single record to {{.TableName}} table in the {{.DatabaseName}} database
// error - NotFound, db Find error
func Get{{.StructName}}(ctx context.Context, id interface{}) (record *{{.modelPackageName}}.{{.StructName}}, err error) {
	if err = DB.First(record, id).Error; err != nil {
	    err = NotFound
		return nil, err
	}

	return record, nil
}

// Add{{.StructName}} is a function to add a single record to {{.TableName}} table in the {{.DatabaseName}} database
// error - InsertFailedError, db save call failed
func Add{{.StructName}}(ctx context.Context, {{.StructName | toLower}} *{{.modelPackageName}}.{{.StructName}}) (result *{{.modelPackageName}}.{{.StructName}}, RowsAffected int64, err error) {
    db := DB.Save({{.StructName | toLower}})
	if err = db.Error; err != nil {
	    return nil, -1, InsertFailedError
	}

	return {{.StructName | toLower}}, db.RowsAffected, nil
}

// Update{{.StructName}} is a function to update a single record from {{.TableName}} table in the {{.DatabaseName}} database
// error - NotFound, db record for id not found
// error - UpdateFailedError, db meta data copy failed or db.Save call failed
func Update{{.StructName}}(ctx context.Context, id interface{}, updated *{{.modelPackageName}}.{{.StructName}}) (result *{{.modelPackageName}}.{{.StructName}}, RowsAffected int64, err error) {

	result = &{{.modelPackageName}}.{{.StructName}}{}
   db := DB.First(result, id)
   if err = db.Error; err != nil {
      return nil, -1, NotFound
   }

   if err = dbmeta.Copy(result, updated); err != nil {
      return nil, -1, UpdateFailedError
      return
   }

   db = db.Save(result)
   if err = db.Error; err != nil  {
      return nil, -1, UpdateFailedError
   }

   return result, db.RowsAffected, nil
}

// Delete{{.StructName}} is a function to delete a single record from {{.TableName}} table in the {{.DatabaseName}} database
// error - NotFound, db Find error
// error - DeleteFailedError, db Delete failed error
func Delete{{.StructName}}(ctx context.Context, id interface{}) (rowsAffected int64, err error) {

    {{.StructName | toLower}} := &{{.modelPackageName}}.{{.StructName}}{}
    db := DB.First({{.StructName | toLower}}, id)
    if db.Error != nil {
        return -1, NotFound
    }

    db = db.Delete({{.StructName | toLower}})
    if err = db.Error; err != nil {
        return -1, DeleteFailedError
    }

   return db.RowsAffected, nil
}

